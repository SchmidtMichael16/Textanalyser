@using Microsoft.AspNetCore.Mvc.Localization
@using Web

@inject IHtmlLocalizer<SharedResources> SharedLocalizer
@inject IViewLocalizer Localizer
@model Web.Models.SearchViewModel

@{
    ViewData["Title"] = "Index";
}

<!--Script references. -->
<!--Reference the SignalR library. -->
@*<script>
    if (typeof Promise === 'undefined') {
        document.write('<script type="text/javascript" src="~/js/signalr-clientES5-1.0.0-alpha2-final.js"><\/script>');
    }
    else {
        document.write('<script type="text/javascript" src="~/js/signalr-client-1.0.0-alpha2-final.js"><\/script>');

    }
</script>*@
<script type="text/javascript"  src="~/js/signalr-client-1.0.0-alpha2-final.js"></script>

<!--Add script to update the page and send messages.-->
 @*<script type="text/javascript">
            document.addEventListener('DOMContentLoaded', function () {

        var word1 = document.getElementById('Word1');
        var word2 = document.getElementById('Word2');
        var word3 = document.getElementById('Word3');
        var alsoSynonyms = document.getElementById('AlsoSynonyms');


        // Set initial focus to word1 input box.
        word1.focus();

        // Start the connection.
        startConnection('/search', function (connection) {
                // Create a function that the hub can call to broadcast messages.
            connection.on('SendMessageToClient', function (word1, word2, word3, alsoSynonyms,) {
                    //// Html encode display name and message.
                    var encodedWord1 = word1;
                    var encodedWord2 = word2;
                    var encodedWord3 = word3;
                    var encodedAlsoSynonyms = alsoSynonyms;
                    //var encodedMsg = message;
                    // Add the message to the page.
                    var liElement = document.createElement('li');
                    liElement.innerHTML = '<strong> search for ' + encodedWord1 + ' ' + encodedWord2 + ' ' + encodedWord3 + ' Synonyms:' + encodedAlsoSynonyms + '</strong>';
                    document.getElementById('Results').appendChild(liElement);
                });
            })
            .then(function (connection) {
                console.log('connection started');
            document.getElementById('search').addEventListener('click', function (event) {
                // Call the Send method on the hub.
                connection.invoke('send', word1.value, word2.value, word3.value, alsoSynonyms.value);

                // Clear text box and reset focus for next search.
                word1.value = '';
                word2.value = '';
                word3.value = '';
                word1.focus();
                event.preventDefault();
                });
            })
            .catch(error => {
                console.error(error.message);
            });

        // Starts a connection with transport fallback - if the connection cannot be started using
        // the webSockets transport the function will fallback to the serverSentEvents transport and
        // if this does not work it will try longPolling. If the connection cannot be started using
        // any of the available transports the function will return a rejected Promise.
        function startConnection(url, configureConnection) {
            return function start(transport) {
                console.log(`Starting connection using ${signalR.TransportType[transport]} transport`);
            var connection = new signalR.HubConnection(url, {transport: transport });
                if (configureConnection && typeof configureConnection === 'function') {
                configureConnection(connection);
            }

                return connection.start()
                    .then(function () {
                        return connection;
                    })
                    .catch(function (error) {
                console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
            if (transport !== signalR.TransportType.LongPolling) {
                            return start(transport + 1);
                        }

                        return Promise.reject(error);
                    });
            }(signalR.TransportType.WebSockets);
        }
    });
</script>*@

<h2>Index</h2>

<h4>SearchViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index" method="get">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Word1" class="control-label">1. @SharedLocalizer["Word"]</label>
                <input asp-for="Word1" class="form-control" />
                <span asp-validation-for="Word1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Word2" class="control-label">2. @SharedLocalizer["Word"]</label>
                <input asp-for="Word2" class="form-control" />
                <span asp-validation-for="Word2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Word3" class="control-label">3. @SharedLocalizer["Word"]</label>
                <input asp-for="Word3" class="form-control" />
                <span asp-validation-for="Word3" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="AlsoSynonyms" /> @Localizer["alsoSynonyms"]
                    </label>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" id="search" value=@SharedLocalizer["Search"] class="btn btn-default" />
            </div>
        </form>

        @*<form action="/action_page.php" method="get">
            First name: <input type="text" name="fname"><br>
            Last name: <input type="text" name="lname"><br>
            <input type="submit" value="Submit">
        </form>*@
    </div>

    
</div>

<div>
    <ul id="Results"></ul>
</div>

